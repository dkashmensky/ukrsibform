{"version":3,"sources":["Assets/img/logo.svg","Components/ProcessStart/ProcessStart.jsx","Components/CreditForm/CreditForm.jsx","Pages/FormPage.jsx","Components/Header/Header.jsx","Components/Footer/Footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","ProcessStart","props","onStepFinish","useState","clientCode","setClientCode","getProcessData","a","fetch","method","headers","body","JSON","stringify","variables","clientIdentificationCode","value","response","console","log","StartButton","withStyles","theme","root","color","palette","getContrastText","backgroundColor","Button","CodeField","borderBottomColor","borderColor","TextField","className","autoComplete","id","label","variant","onChange","ev","code","target","test","length","autoFocus","onClick","CreditForm","FormPage","started","processId","taskId","processState","setProcessState","data","Header","src","Logo","alt","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,sSC2F5BC,EArFM,SAACC,GACOA,EAAjBC,aADqB,IAAD,EAIQC,mBAAS,IAJjB,mBAIrBC,EAJqB,KAITC,EAJS,KActBC,EAAc,uCAAG,4BAAAC,EAAA,sEACIC,MAbR,qGAa0B,CACrCC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBC,UAAW,CACPC,yBAA0B,CACtBC,MAAO,mBATJ,OACbC,EADa,OAcnBC,QAAQC,IAAIF,GAdO,2CAAH,qDAiBdG,EAAcC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACFC,MAAOF,EAAMG,QAAQC,gBAAgB,WACrCC,gBAAiB,UACjB,UAAW,CACPA,gBAAiB,eALTN,CAQhBO,KAEEC,EAAYR,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACF,sBAAuB,CACnBC,MAAO,WAEX,8BAA+B,CAC3BM,kBAAmB,WAEvB,2BAA4B,CACxB,mBAAoB,CAChBC,YAAa,WAEjB,yBAA0B,CACtBA,YAAa,gBAbXV,CAiBdW,KAEJ,OACI,yBAAKC,UAAU,iBACX,uBAAGA,UAAU,eAAb,4aAGA,0BAAMC,aAAa,MAAMD,UAAU,eAC/B,kBAACJ,EAAD,CACIM,GAAG,cACHC,MAAM,kFACNC,QAAQ,WACRrB,MAAOZ,EACPkC,SAjES,SAAAC,GACrB,IAAMC,EAAOD,EAAGE,OAAOzB,MACR,WACJ0B,KAAKF,IAASA,EAAKG,OAAS,GACnCtC,EAAcmC,IA8DNI,WAAS,IAEb,kBAACxB,EAAD,CACIiB,QAAQ,YACRb,MAAM,UACNqB,QAASvC,GAHb,qCCtEDwC,EARI,WACf,OACI,iHCkBOC,EAlBE,WAAO,IAAD,EACqB5C,mBAAS,CAC7C6C,SAAS,EACTC,UAAW,EACXC,OAAQ,IAJO,mBACZC,EADY,KACEC,EADF,KAWnB,OACI,oCACKD,EAAaH,QAAU,kBAAC,EAAD,MAAiB,kBAAC,EAAD,CAAc9C,aANxC,SAAAmD,GACnBD,EAAgBC,Q,yBCITC,EAZA,WACX,OACI,yBAAKrB,UAAU,UACX,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,eAAesB,IAAMC,IAAOC,IAAI,SAC/C,0BAAMxB,UAAU,gBAAhB,4JCQDyB,G,MAdA,WACX,OACI,yBAAKzB,UAAU,UACX,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,gBACX,yBAAKsB,IAAMC,IAAOC,IAAI,GAAGxB,UAAU,iBACnC,0BAAMA,UAAU,qBAAhB,oGCMD0B,MAVf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.ee613ce9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.22e7c505.svg\";","import React, { useState } from 'react';\r\nimport './ProcessStart.scss';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst ProcessStart = (props) => {\r\n    const { onStepFinish } = props;\r\n    const processUrl = 'https://wisconsin.integrity.com.ua/engine-rest/process-definition/key/ukrsibbank-demo-credit/start';\r\n    const taskUrl = 'https://wisconsin.integrity.com.ua/engine-rest/task?processInstanceId=%D0%98%D0%94_%D0%9F%D0%A0%D0%9E%D0%A6%D0%95%D0%A1%D0%A1%D0%90';\r\n    const [clientCode, setClientCode] = useState('');\r\n\r\n    const handleCodeChange = ev => {\r\n        const code = ev.target.value;\r\n        const regExp = /^[0-9]*$/\r\n        if (regExp.test(code) && code.length < 9) {\r\n            setClientCode(code);\r\n        }\r\n    }\r\n\r\n    const getProcessData = async () => {\r\n        const response = await fetch(processUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                variables: {\r\n                    clientIdentificationCode: {\r\n                        value: '3385308153',\r\n                    },\r\n                },\r\n            }),\r\n        });\r\n        console.log(response);\r\n    }\r\n\r\n    const StartButton = withStyles((theme) => ({\r\n        root: {\r\n            color: theme.palette.getContrastText('#01935d'),\r\n            backgroundColor: '#01935d',\r\n            '&:hover': {\r\n                backgroundColor: '#00ab7b',\r\n            }\r\n        }\r\n    }))(Button);\r\n\r\n    const CodeField = withStyles((theme) => ({\r\n        root: {\r\n            '& label.Mui-focused': {\r\n                color: '#01935d',\r\n            },\r\n            '& .MuiInput-underline:after': {\r\n                borderBottomColor: '#01935d',\r\n            },\r\n            '& .MuiOutlinedInput-root': {\r\n                '&:hover fieldset': {\r\n                    borderColor: '#01935d',\r\n                },\r\n                '&.Mui-focused fieldset': {\r\n                    borderColor: '#01935d',\r\n                },\r\n            },\r\n        }\r\n    }))(TextField);\r\n\r\n    return (\r\n        <div className=\"wrapper start\">\r\n            <p className=\"start__text\">\r\n                Для початку процесу заповнення заявки введіть ЄДРПОУ клієнта і натисніть кнопку\r\n            </p>\r\n            <form autoComplete=\"off\" className=\"start__form\">\r\n                <CodeField\r\n                    id=\"client-code\"\r\n                    label=\"ЄДРПОУ клієнта\"\r\n                    variant=\"outlined\"\r\n                    value={clientCode}\r\n                    onChange={handleCodeChange}\r\n                    autoFocus\r\n                />\r\n                <StartButton\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={getProcessData}>\r\n                        Пошук\r\n                </StartButton>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProcessStart;","import React from 'react';\r\n\r\nconst CreditForm = () => {\r\n    return (\r\n        <div>\r\n            Кредитна форма\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreditForm;","import React, { useState } from 'react';\r\nimport ProcessStart from '../Components/ProcessStart/ProcessStart';\r\nimport CreditForm from '../Components/CreditForm/CreditForm';\r\n\r\nconst FormPage = () => {\r\n    const [processState, setProcessState] = useState({\r\n        started: false,\r\n        processId: 0,\r\n        taskId: 0,\r\n    });\r\n\r\n    const setProcessData = data => {\r\n        setProcessState(data);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {processState.started ? <CreditForm /> : <ProcessStart onStepFinish={setProcessData} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormPage;","import React from 'react';\r\nimport './Header.scss';\r\nimport Logo from '../../Assets/img/logo.svg';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header__top\"></div>\r\n            <div className=\"header__bottom\">\r\n                <img className=\"header__logo\" src={ Logo } alt=\"logo\"></img>\r\n                <span className=\"header__text\">Банк для світу, що змінюється</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Footer.scss';\r\nimport Logo from '../../Assets/img/logo.svg';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"footer__delim\"></div>\r\n            <div className=\"footer__main\">\r\n                <img src={ Logo } alt=\"\" className=\"footer__logo\"/>\r\n                <span className=\"footer__copyright\">\r\n                    © АТ «УКРСИББАНК», 2020\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.scss';\nimport FormPage from './Pages/FormPage';\nimport Header from './Components/Header/Header';\nimport Footer from './Components/Footer/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <FormPage />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}